stages:
  - lint
  - build
  - test
  - package
  - deploy

.before_deploy: &before_deploy_shared
  before_script:
    - apk update
    - apk add git
    # Setup SSH deploy keys
    - which ssh-agent || ( apk add openssh-client )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'


lint-front:
  stage: lint
  script:
    - echo "I'm linting your angular code"
    - cd webapp
    - npm install
    - npm install eslint --save-dev
    - npm i npx
    - npx eslint "**/*.ts"

lint-back:
  image: golang:1.10
  stage: lint
  script:
    - echo "I'm linting your go code"
    - cd server
    - export GOPATH=`pwd`
    - echo $GOPATH
    - go get -u golang.org/x/lint/golint
    - ./bin/golint files/main.go

build-front:
  stage: build
  script:
    - echo "Hello, i'm building your front-end"
    - cd ./webapp
    - npm install
    - npm install @angular/cli
    - npm run build
  artifacts:
    paths:
      - /builds/CamillePolice/cicd-module/webapp/dist/

build-back:
  image: golang:1.10
  stage: build
  script:
    - echo "Hello, i'm building your back-end"
    - cd server/files
    - go build main.go
  artifacts:
    paths:
      - /builds/CamillePolice/cicd-module/server/files/main.go
      - /builds/CamillePolice/cicd-module/server/files/main

test-front:
  allow_failure: true
  stage: test
  script:
    - cat main.go
    - echo "I'm testing your front"
    - cd ./webapp
    - npm install
    - npm install @angular/cli
    - npm run test

test-back:
  image: golang:1.10
  allow_failure: true
  stage: test
  script:
    - echo "I'm testing your back"
    - cd server/files
    - go test

package-job:
  <<: *before_deploy_shared
  stage: package
  script:
    - echo "I'm packaging your code to the staging environment"
    - ssh tchiquizz@35.246.86.197 "ls /"
  only:
    - master

deploy-job:
  stage: deploy
  script:
    - echo "I'm deploying your code to the production environment"
  tags:
    - tag
